
[title]: Quicksort Algorithm

[info]: A utility function to swap two elements
ACT swap starring (int* a, int* b)
{
    int t = a;
    a = b;
    b = t;
}
 
[]* This function takes last element as pivot, places
   the pivot element at its correct position in sorted
    array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right
   of pivot *[]
ACT partition starring (int[] arr, int low, int high)
{
    int pivot = arr[high];  
    int i = (low - 1); 
 
    replay (int j = low; j <= high- 1; j++){
        if (arr[j] <= pivot)
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    give (i + 1);
}
[]* The main function that implements QuickSort
 arr[] --> Array to be sorted,
  low  --> Starting index,
  high  --> Ending index *[]
  
ACT quickSort starring (int[] arr, int low, int high)
{
    if (low < high){
        []* pi is partitioning index, arr[p] is now
           at right place *[]
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
 
[Info]: Function to print an array 
ACT printArray starring (int[] arr, int size)
{
    int i;
    replay (i=0; i < size; i++){
        Say arr[i];
     }
    Say "n";
}
 
[Info]: Driver program to test above functions
ACT main starring ()
{
    int[] arr = new int[]{10, 7, 8, 9, 1, 5};
    int n = 6;
    quickSort(arr, 0, n-1);
    Say "Sorted array: n";
    printArray(arr, n);
}
